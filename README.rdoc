to be updated ...

= mme_tools

Sparse homeless methods that haven't found their home, ... at present

== Usage

There are some 'specialized' modules:

* MMETools::Concurrent. Some thread save methods thread
* MMETools::Config. A class that eases configure apps
* MMETools::Debug. A convenient print_debug method
* MMETools::Enumerable. Some methods that I use with arrays
* MMETools::ArgsProc. Methods to process args for methods and initializers.
* MMETools::Webparse. Methods to cleanup dirty strings from websites

To use any of them you can ...

    require 'rubygems'
    require 'mme_tools/enumerable'

or all of them

    require 'rubygems'
    require 'mmetools'

A soon as modules are required, you can use its methods directly as class
methods like:

    MMETools::Enumerable.compose(%w(a b), %w(A B), (1..2).to_a)
    # => [["a", "A", 1], ["b", "B", 2]]

or include them in your classes to access methods through instances

    class MyClass
    include MMETools::Enumerable
    end

    x=MyClass.new
    x.compose(%w(a b), %w(A B), (1..2).to_a)
    # => [["a", "A", 1], ["b", "B", 2]]

== Copyright

Copyright (c) 2011 Marcel Massana. See LICENSE.txt for
further details.
